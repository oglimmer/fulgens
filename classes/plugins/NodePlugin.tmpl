
{{ header }}

{{ preparecomp }}

{{ getsource }}

{{ prebuild }}

{{ build }}

f_build() {
  if [ "$VERBOSE" == "YES" ]; then echo "npm i --save-prod"; fi
  {{Build}}
}
if [ "$SKIP_BUILD" != "YES" ]; then
  if [ -n "$CLEAN" ]; then
    if [ "$VERBOSE" == "YES" ]; then echo "rm -rf node_modules/"; fi
    rm -rf node_modules/
  fi
  f_build        
fi

{{ postbuild }}

{{ prestart }}

{{ start }}

if [ "${{typeSourceVarName}}" == "docker" ]; then
  #if [ -f "{{pidFile}}" ] && [ "$(<{{pidFile}})" == "download" ]; then
  #  echo "node running but started from different source type"
  #  exit 1
  #fi
  if [ ! -f "{{pidFile}}" ]; then
    {{storeFileForDocker}}
    if [ -n "$VERBOSE" ]; then echo ".."; fi
    dockerContainerID{{softwareComponentName}}=$(docker run --rm -d $dockerNodeExtRef -p {{ExposedPort}}:{{ExposedPort}} \
        {{mountToDocker}}  \
        {{AllEnvVarsDocker}} \
        -v "$(pwd)":/home/node/exec_env -w /home/node/exec_env node:${{typeSourceVarName}}_VERSION node {{NodeParam}} ./{{Artifact}})
    echo "$dockerContainerID{{softwareComponentName}}">{{pidFile}}
  else
    dockerContainerID{{softwareComponentName}}=$(<{{pidFile}})
  fi
  tailCmd="docker logs -f $dockerContainerID{{softwareComponentName}}"
fi

if [ "${{typeSourceVarName}}" == "local" ]; then
  #if [ -f "{{pidFile}}" ]; then
  #  echo "node running but started from different source type"
  #  exit 1
  #fi
  if [ ! -f "{{pidFile}}" ]; then
      cat > localrun/noint.js <<EOF
      process.on( "SIGINT", function() {} );
      require('../{{Artifact}}');
EOF
    {{storeFileAndExportEnvVar}}
    {{AllEnvVarsNode}} node {{NodeParam}} localrun/noint.js >localrun/noint.out 2>&1 & 
    processId{{softwareComponentName}}=$!
    echo "$processId{{softwareComponentName}}">{{pidFile}}
  else
    processId{{softwareComponentName}}=$(<{{pidFile}})
  fi
  tailCmd="tail -f localrun/noint.out"
fi



{{ poststart }}

{{ leavecomp }}
