
{{ header }}

{{ preparecomp }}

{{ getsource }}

if [ "$BUILD" == "local" ]; then
  f_build() {
    verbosePrint "pwd=$(pwd)\nmvn {{GoalIgnoreClean}} $MVN_OPTS {{Goal}}"
    {{BeforeBuild}}
    {{AllEnvVarsShell}}
    mvn {{GoalIgnoreClean}} $MVN_OPTS {{Goal}}
    {{AfterBuild}}
  }
fi

if [[ "$BUILD" == docker* ]]; then
  IFS=: read mainType dockerVersion <<< "$BUILD"
  if [ -z "$dockerVersion" ]; then
    dockerVersion="{{defaultDockerVersion}}"
  fi

  {% if dependencyManager.hasAnyBuildDep() %} 
  dockerImage=maven_build
  mkdir -p localrun/dockerbuild
  cat <<- EOFDOCK > localrun/dockerbuild/Dockerfile
    FROM {{DockerImage}}:$dockerVersion
    RUN apt-get update && \\ {{dependencyManager.getAptBuild()}} && \\
      apt-get clean && \\
      rm -rf /tmp/* /var/tmp/* /var/lib/apt/archive/* /var/lib/apt/lists/*
    {{dependencyManager.getNpmBuild('RUN')}}
    ENTRYPOINT ["/usr/local/bin/mvn-entrypoint.sh"]
    CMD ["mvn"]
EOFDOCK
  verbosePrint "docker build --tag maven_build:$dockerVersion localrun/dockerbuild/"
  docker build --tag maven_build:$dockerVersion localrun/dockerbuild/
  {% else %}
  dockerImage={{DockerImage}}
  {% endif %}

  f_build() {
    verbosePrint "pwd=$(pwd)\ndocker run --rm -v $(pwd):/usr/src/build -v {{m2Mapping}}:/root/.m2 -w /usr/src/build $dockerImage:$dockerVersion mvn {{GoalIgnoreClean}} $MVN_OPTS {{Goal}}"
    {{BeforeBuild}}
    docker run --rm {{AllEnvVarsDocker}} -v "$(pwd)":/usr/src/build -v {{m2Mapping}}:/root/.m2 -w /usr/src/build $dockerImage:$dockerVersion mvn {{GoalIgnoreClean}} $MVN_OPTS {{Goal}}
    {{AfterBuild}}
  }
fi   

if [ "$SKIP_BUILD" != "YES" ]; then
  if [ -n "$CLEAN" ]; then
    MVN_CLEAN=clean
  fi
  f_build
else
  verbosePrint "Mvn build skipped."
fi  

{{ prestart }}

{{ poststart }}

{{ leavecomp }}
