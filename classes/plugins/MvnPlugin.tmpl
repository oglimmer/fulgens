
{{ header }}

{{ preparecomp }}

{{ getsource }}

{{ prebuild }}

{{ build }}

if [ "$BUILD" == "local" ]; then
  f_build() {
    if [ -n "$VERBOSE" ]; then echo "pwd=$(pwd)"; echo "mvn {{GoalIgnoreClean}} $MVN_OPTS {{Goal}}"; fi
    {{BeforeBuild}}
    mvn {{GoalIgnoreClean}} $MVN_OPTS {{Goal}}
    {{AfterBuild}}
  }
fi

if [[ "$BUILD" == docker* ]]; then
  IFS=: read mainType dockerVersion <<< "$BUILD"
  if [ -z "$dockerVersion" ]; then
    dockerVersion="{{DEFAULT_DOCKER_VERSION}}"
  fi

  {% if dependencyManager.hasAnyBuildDep() %} 
  dockerImage=maven_build
  mkdir -p localrun/dockerbuild
  cat <<- EOFDOCK > localrun/dockerbuild/Dockerfile
    FROM maven:$dockerVersion
    RUN apt-get update && \\ {{dependencyManager.getAptBuild()}} && \\
      apt-get clean && \\
      rm -rf /tmp/* /var/tmp/* /var/lib/apt/archive/* /var/lib/apt/lists/*
    RUN {{dependencyManager.getNpmBuild()}}
    ENTRYPOINT ["/usr/local/bin/mvn-entrypoint.sh"]
    CMD ["mvn"]
EOFDOCK
  docker build --tag maven_build:$dockerVersion localrun/dockerbuild/
  {% else %}
  dockerImage=maven
  {% endif %}

  f_build() {
    if [ -n "$VERBOSE" ]; then echo "pwd=$(pwd)"; echo "docker run --rm -v $(pwd):/usr/src/build -v $(pwd)/localrun/.m2:/root/.m2 -w /usr/src/build $dockerImage:$dockerVersion mvn {{GoalIgnoreClean}} $MVN_OPTS {{Goal}}"; fi
    {{BeforeBuild}}
    docker run --rm -v "$(pwd)":/usr/src/build -v "$(pwd)/localrun/.m2":/root/.m2 -w /usr/src/build $dockerImage:$dockerVersion mvn {{GoalIgnoreClean}} $MVN_OPTS {{Goal}}
    {{AfterBuild}}
  }
fi   

if [ "$SKIP_BUILD" != "YES" ]; then
  if [ -n "$CLEAN" ]; then
    MVN_CLEAN=clean
  fi
  f_build
fi  

{{ postbuild }}

{{ prestart }}

{{ start }}

{{ poststart }}

{{ leavecomp }}
